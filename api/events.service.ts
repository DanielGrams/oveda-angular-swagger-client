/**
 * Oveda API
 * This API provides endpoints to interact with the Oveda data.
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ErrorResponse } from '../model/errorResponse';
import { Event } from '../model/event';
import { EventDateListResponse } from '../model/eventDateListResponse';
import { EventId } from '../model/eventId';
import { EventListResponse } from '../model/eventListResponse';
import { EventPatchRequest } from '../model/eventPatchRequest';
import { EventPostRequest } from '../model/eventPostRequest';
import { EventSearchResponse } from '../model/eventSearchResponse';
import { UnprocessableEntityResponse } from '../model/unprocessableEntityResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class EventsService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * List events
     * 
     * @param page The page number (1 indexed).
     * @param per_page Items per page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1EventsGet(page?: number, per_page?: number, observe?: 'body', reportProgress?: boolean): Observable<EventListResponse>;
    public apiV1EventsGet(page?: number, per_page?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EventListResponse>>;
    public apiV1EventsGet(page?: number, per_page?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EventListResponse>>;
    public apiV1EventsGet(page?: number, per_page?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (per_page !== undefined && per_page !== null) {
            queryParameters = queryParameters.set('per_page', <any>per_page);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EventListResponse>(`${this.basePath}/api/v1/events`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List dates for event
     * 
     * @param id 
     * @param page The page number (1 indexed).
     * @param per_page Items per page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1EventsIdDatesGet(id: number, page?: number, per_page?: number, observe?: 'body', reportProgress?: boolean): Observable<EventDateListResponse>;
    public apiV1EventsIdDatesGet(id: number, page?: number, per_page?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EventDateListResponse>>;
    public apiV1EventsIdDatesGet(id: number, page?: number, per_page?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EventDateListResponse>>;
    public apiV1EventsIdDatesGet(id: number, page?: number, per_page?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiV1EventsIdDatesGet.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (per_page !== undefined && per_page !== null) {
            queryParameters = queryParameters.set('per_page', <any>per_page);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EventDateListResponse>(`${this.basePath}/api/v1/events/${encodeURIComponent(String(id))}/dates`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete event
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1EventsIdDelete(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiV1EventsIdDelete(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiV1EventsIdDelete(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiV1EventsIdDelete(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiV1EventsIdDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/v1/events/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get event
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1EventsIdGet(id: number, observe?: 'body', reportProgress?: boolean): Observable<Event>;
    public apiV1EventsIdGet(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Event>>;
    public apiV1EventsIdGet(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Event>>;
    public apiV1EventsIdGet(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiV1EventsIdGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Event>(`${this.basePath}/api/v1/events/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Patch event
     * 
     * @param id 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1EventsIdPatch(id: number, body?: EventPatchRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiV1EventsIdPatch(id: number, body?: EventPatchRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiV1EventsIdPatch(id: number, body?: EventPatchRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiV1EventsIdPatch(id: number, body?: EventPatchRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiV1EventsIdPatch.');
        }


        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            '*/*'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<any>(`${this.basePath}/api/v1/events/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update event
     * 
     * @param id 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1EventsIdPut(id: number, body?: EventPostRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiV1EventsIdPut(id: number, body?: EventPostRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiV1EventsIdPut(id: number, body?: EventPostRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiV1EventsIdPut(id: number, body?: EventPostRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiV1EventsIdPut.');
        }


        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            '*/*'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/api/v1/events/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search for events
     * 
     * @param page The page number (1 indexed).
     * @param per_page Items per page
     * @param keyword Looks for keyword in name, description and tags.
     * @param date_from Looks for events at or after this date, e.g. 2020-12-31.
     * @param date_to Looks for events at or before this date, e.g. 2020-12-31.
     * @param coordinate Looks for events around this coordinate. Expects comma separated latitude and longitude, e.g. \&quot;51.9077888,10.4333312\&quot;. See distance.
     * @param distance Looks for events around a coordinate within this distance. Expects distance in meters. See coordinate.
     * @param category_id Looks for events with this category ids.
     * @param weekday Looks for events at this weekdays (0&#x3D;Sunday, 1&#x3D;Monday, ..).
     * @param sort Sort result items.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1EventsSearchGet(page?: number, per_page?: number, keyword?: string, date_from?: string, date_to?: string, coordinate?: string, distance?: number, category_id?: Array<number>, weekday?: Array<number>, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<EventSearchResponse>;
    public apiV1EventsSearchGet(page?: number, per_page?: number, keyword?: string, date_from?: string, date_to?: string, coordinate?: string, distance?: number, category_id?: Array<number>, weekday?: Array<number>, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EventSearchResponse>>;
    public apiV1EventsSearchGet(page?: number, per_page?: number, keyword?: string, date_from?: string, date_to?: string, coordinate?: string, distance?: number, category_id?: Array<number>, weekday?: Array<number>, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EventSearchResponse>>;
    public apiV1EventsSearchGet(page?: number, per_page?: number, keyword?: string, date_from?: string, date_to?: string, coordinate?: string, distance?: number, category_id?: Array<number>, weekday?: Array<number>, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {











        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (per_page !== undefined && per_page !== null) {
            queryParameters = queryParameters.set('per_page', <any>per_page);
        }
        if (keyword !== undefined && keyword !== null) {
            queryParameters = queryParameters.set('keyword', <any>keyword);
        }
        if (date_from !== undefined && date_from !== null) {
            queryParameters = queryParameters.set('date_from', <any>date_from);
        }
        if (date_to !== undefined && date_to !== null) {
            queryParameters = queryParameters.set('date_to', <any>date_to);
        }
        if (coordinate !== undefined && coordinate !== null) {
            queryParameters = queryParameters.set('coordinate', <any>coordinate);
        }
        if (distance !== undefined && distance !== null) {
            queryParameters = queryParameters.set('distance', <any>distance);
        }
        if (category_id) {
            category_id.forEach((element) => {
                queryParameters = queryParameters.append('category_id', <any>element);
            })
        }
        if (weekday) {
            weekday.forEach((element) => {
                queryParameters = queryParameters.append('weekday', <any>element);
            })
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EventSearchResponse>(`${this.basePath}/api/v1/events/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List events of organization
     * 
     * @param id 
     * @param page The page number (1 indexed).
     * @param per_page Items per page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1OrganizationsIdEventsGet(id: number, page?: number, per_page?: number, observe?: 'body', reportProgress?: boolean): Observable<EventListResponse>;
    public apiV1OrganizationsIdEventsGet(id: number, page?: number, per_page?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EventListResponse>>;
    public apiV1OrganizationsIdEventsGet(id: number, page?: number, per_page?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EventListResponse>>;
    public apiV1OrganizationsIdEventsGet(id: number, page?: number, per_page?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiV1OrganizationsIdEventsGet.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (per_page !== undefined && per_page !== null) {
            queryParameters = queryParameters.set('per_page', <any>per_page);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EventListResponse>(`${this.basePath}/api/v1/organizations/${encodeURIComponent(String(id))}/events`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add new event
     * 
     * @param id 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1OrganizationsIdEventsPost(id: number, body?: EventPostRequest, observe?: 'body', reportProgress?: boolean): Observable<EventId>;
    public apiV1OrganizationsIdEventsPost(id: number, body?: EventPostRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EventId>>;
    public apiV1OrganizationsIdEventsPost(id: number, body?: EventPostRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EventId>>;
    public apiV1OrganizationsIdEventsPost(id: number, body?: EventPostRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiV1OrganizationsIdEventsPost.');
        }


        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            '*/*'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<EventId>(`${this.basePath}/api/v1/organizations/${encodeURIComponent(String(id))}/events`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search for events of organization
     * 
     * @param id 
     * @param page The page number (1 indexed).
     * @param per_page Items per page
     * @param keyword Looks for keyword in name, description and tags.
     * @param date_from Looks for events at or after this date, e.g. 2020-12-31.
     * @param date_to Looks for events at or before this date, e.g. 2020-12-31.
     * @param coordinate Looks for events around this coordinate. Expects comma separated latitude and longitude, e.g. \&quot;51.9077888,10.4333312\&quot;. See distance.
     * @param distance Looks for events around a coordinate within this distance. Expects distance in meters. See coordinate.
     * @param category_id Looks for events with this category ids.
     * @param weekday Looks for events at this weekdays (0&#x3D;Sunday, 1&#x3D;Monday, ..).
     * @param sort Sort result items.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1OrganizationsIdEventsSearchGet(id: number, page?: number, per_page?: number, keyword?: string, date_from?: string, date_to?: string, coordinate?: string, distance?: number, category_id?: Array<number>, weekday?: Array<number>, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<EventSearchResponse>;
    public apiV1OrganizationsIdEventsSearchGet(id: number, page?: number, per_page?: number, keyword?: string, date_from?: string, date_to?: string, coordinate?: string, distance?: number, category_id?: Array<number>, weekday?: Array<number>, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EventSearchResponse>>;
    public apiV1OrganizationsIdEventsSearchGet(id: number, page?: number, per_page?: number, keyword?: string, date_from?: string, date_to?: string, coordinate?: string, distance?: number, category_id?: Array<number>, weekday?: Array<number>, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EventSearchResponse>>;
    public apiV1OrganizationsIdEventsSearchGet(id: number, page?: number, per_page?: number, keyword?: string, date_from?: string, date_to?: string, coordinate?: string, distance?: number, category_id?: Array<number>, weekday?: Array<number>, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiV1OrganizationsIdEventsSearchGet.');
        }











        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (per_page !== undefined && per_page !== null) {
            queryParameters = queryParameters.set('per_page', <any>per_page);
        }
        if (keyword !== undefined && keyword !== null) {
            queryParameters = queryParameters.set('keyword', <any>keyword);
        }
        if (date_from !== undefined && date_from !== null) {
            queryParameters = queryParameters.set('date_from', <any>date_from);
        }
        if (date_to !== undefined && date_to !== null) {
            queryParameters = queryParameters.set('date_to', <any>date_to);
        }
        if (coordinate !== undefined && coordinate !== null) {
            queryParameters = queryParameters.set('coordinate', <any>coordinate);
        }
        if (distance !== undefined && distance !== null) {
            queryParameters = queryParameters.set('distance', <any>distance);
        }
        if (category_id) {
            category_id.forEach((element) => {
                queryParameters = queryParameters.append('category_id', <any>element);
            })
        }
        if (weekday) {
            weekday.forEach((element) => {
                queryParameters = queryParameters.append('weekday', <any>element);
            })
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EventSearchResponse>(`${this.basePath}/api/v1/organizations/${encodeURIComponent(String(id))}/events/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
